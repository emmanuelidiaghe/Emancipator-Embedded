
counter using TCNT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fb  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000566  00000000  00000000  0000080f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b0  00000000  00000000  00000d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	62 97       	sbiw	r28, 0x12	; 18
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;  // set for output
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a bb       	out	0x1a, r24	; 26
	PORTA= 0x00;
  84:	1b ba       	out	0x1b, r1	; 27
	DDRC = 0xFF;  // set for output
  86:	84 bb       	out	0x14, r24	; 20
	PORTC= 0x00; 
  88:	15 ba       	out	0x15, r1	; 21
	
	int count1   = 0;
	int count2   = 0;
	int led1[9] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80}; //Array of LED shifts
  8a:	fe 01       	movw	r30, r28
  8c:	31 96       	adiw	r30, 0x01	; 1
  8e:	82 e1       	ldi	r24, 0x12	; 18
  90:	df 01       	movw	r26, r30
  92:	1d 92       	st	X+, r1
  94:	8a 95       	dec	r24
  96:	e9 f7       	brne	.-6      	; 0x92 <main+0x26>
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9c 83       	std	Y+4, r25	; 0x04
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	9e 83       	std	Y+6, r25	; 0x06
  ae:	8d 83       	std	Y+5, r24	; 0x05
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	98 87       	std	Y+8, r25	; 0x08
  b6:	8f 83       	std	Y+7, r24	; 0x07
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	9a 87       	std	Y+10, r25	; 0x0a
  be:	89 87       	std	Y+9, r24	; 0x09
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9c 87       	std	Y+12, r25	; 0x0c
  c6:	8b 87       	std	Y+11, r24	; 0x0b
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9e 87       	std	Y+14, r25	; 0x0e
  ce:	8d 87       	std	Y+13, r24	; 0x0d
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	98 8b       	std	Y+16, r25	; 0x10
  d6:	8f 87       	std	Y+15, r24	; 0x0f
	//int led2[9] = {0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};

	TCCR1B|=(1<<CS12); // using 256 pre-scaler
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	8e bd       	out	0x2e, r24	; 46
	PORTA= 0x00;
	DDRC = 0xFF;  // set for output
	PORTC= 0x00; 
	
	int count1   = 0;
	int count2   = 0;
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	9e 01       	movw	r18, r28
  e4:	2f 5e       	subi	r18, 0xEF	; 239
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
				count1 = 0;
				PORTC  = led1[count2];
				count2++;
				if (count2 == 8)
				{
					count2 = 0;
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	fe 01       	movw	r30, r28
  ee:	31 96       	adiw	r30, 0x01	; 1

	TCCR1B|=(1<<CS12); // using 256 pre-scaler
	
    while (1) 
    {
		if (TCNT1 == 7813)  //set counter to 1/8th second
  f0:	8c b5       	in	r24, 0x2c	; 44
  f2:	9d b5       	in	r25, 0x2d	; 45
  f4:	85 38       	cpi	r24, 0x85	; 133
  f6:	9e 41       	sbci	r25, 0x1E	; 30
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x84>
		{
			TCNT1 = 0;
  fa:	1d bc       	out	0x2d, r1	; 45
  fc:	1c bc       	out	0x2c, r1	; 44
			PORTA = led1[count1];
  fe:	80 81       	ld	r24, Z
 100:	32 96       	adiw	r30, 0x02	; 2
 102:	8b bb       	out	0x1b, r24	; 27
			count1++;
			if (count1 == 8)
 104:	e2 17       	cp	r30, r18
 106:	f3 07       	cpc	r31, r19
 108:	99 f7       	brne	.-26     	; 0xf0 <main+0x84>
			{
				count1 = 0;
				PORTC  = led1[count2];
 10a:	fa 01       	movw	r30, r20
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	8c 0f       	add	r24, r28
 116:	9d 1f       	adc	r25, r29
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	80 81       	ld	r24, Z
 11e:	85 bb       	out	0x15, r24	; 21
				count2++;
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
				if (count2 == 8)
 124:	48 30       	cpi	r20, 0x08	; 8
 126:	51 05       	cpc	r21, r1
 128:	09 f7       	brne	.-62     	; 0xec <main+0x80>
				{
					count2 = 0;
 12a:	47 2f       	mov	r20, r23
 12c:	56 2f       	mov	r21, r22
 12e:	de cf       	rjmp	.-68     	; 0xec <main+0x80>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
