
using595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4e  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067f  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000206c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000616  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c1  00000000  00000000  00002862  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002f23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  8a:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN5HC5954initEv>:
		  #define HC595Data3Low() (HC595_PORT&=(~(1<<HC595_DS3_POS)))
	 }
	 #endif
	 #if (NumOfReg == 4)
	 {
		 HC595_DDR|=((1<<HC595_SH1_CP_POS)|(1<<HC595_SH2_CP_POS)|(1<<HC595_SH3_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS1_POS)|(1<<HC595_DS2_POS)|(1<<HC595_DS3_POS)|(1<<HC595_DS4_POS));
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
		 HC595_4_DDR|=(1<<HC595_4_SH4_CP_POS);
  98:	8f 9a       	sbi	0x11, 7	; 17
  9a:	08 95       	ret

0000009c <_ZN5HC59510HC595LatchEv>:
 
 
 void HC595::HC595Latch()
 {
	 //Common Latch for all Shift Registers
	 HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
  9c:	c7 9a       	sbi	0x18, 7	; 24
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	98 2f       	mov	r25, r24
  a2:	9a 95       	dec	r25
  a4:	f1 f7       	brne	.-4      	; 0xa2 <_ZN5HC59510HC595LatchEv+0x6>
	 _delay_loop_1(1);

	 HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
  a6:	c7 98       	cbi	0x18, 7	; 24
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_ZN5HC59510HC595LatchEv+0xc>
  ac:	08 95       	ret

000000ae <_ZN5HC59511HC595Pulse1Ev>:
 void HC595::HC595Pulse1()
 {
	 #if (NumOfReg >= 1 && NumOfReg <= 4)
	 {
		  //Pulse the 1st Shift Clock
		  HC595_PORT|=(1<<HC595_SH1_CP_POS);//HIGH
  ae:	c4 9a       	sbi	0x18, 4	; 24

		  HC595_PORT&=(~(1<<HC595_SH1_CP_POS));//LOW
  b0:	c4 98       	cbi	0x18, 4	; 24
  b2:	08 95       	ret

000000b4 <_ZN5HC59511HC595Pulse2Ev>:
 void HC595::HC595Pulse2()
 {
	 #if (NumOfReg >= 2 && NumOfReg <= 4)
	 {
	 //Pulse the 2nd Shift Clock
	 HC595_PORT|=(1<<HC595_SH2_CP_POS);//HIGH
  b4:	c5 9a       	sbi	0x18, 5	; 24

	 HC595_PORT&=(~(1<<HC595_SH2_CP_POS));//LOW
  b6:	c5 98       	cbi	0x18, 5	; 24
  b8:	08 95       	ret

000000ba <_ZN5HC59511HC595Pulse3Ev>:
 void HC595::HC595Pulse3()
 {
	 #if (NumOfReg >= 3 && NumOfReg <= 4)
	 {
	 //Pulse the 3rd Shift Clock
	 HC595_PORT|=(1<<HC595_SH3_CP_POS);//HIGH
  ba:	c6 9a       	sbi	0x18, 6	; 24

	 HC595_PORT&=(~(1<<HC595_SH3_CP_POS));//LOW
  bc:	c6 98       	cbi	0x18, 6	; 24
  be:	08 95       	ret

000000c0 <_ZN5HC59511HC595Pulse4Ev>:
 void HC595::HC595Pulse4()
 {
	 #if (NumOfReg == 4)
	 {
	 //Pulse the 4th Shift Clock
	 HC595_4_PORT|=(1<<HC595_4_SH4_CP_POS);//HIGH
  c0:	97 9a       	sbi	0x12, 7	; 18

	 HC595_4_PORT&=(~(1<<HC595_4_SH4_CP_POS));//LOW
  c2:	97 98       	cbi	0x12, 7	; 18
  c4:	08 95       	ret

000000c6 <_ZN5HC5956Write1Eh>:
	 }
	 #endif
 }
 
 void HC595::Write1(uint8_t data1)
 {
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	8c 01       	movw	r16, r24
  d0:	d6 2f       	mov	r29, r22
  d2:	c8 e0       	ldi	r28, 0x08	; 8
	 //Order is MSB first
	 for(uint8_t i=0;i<8;i++)
	 {
		 //Output the data on DS line according to the
		 //Value of MSB
		 if(data1 & 0b10000000)
  d4:	dd 23       	and	r29, r29
  d6:	14 f4       	brge	.+4      	; 0xdc <_ZN5HC5956Write1Eh+0x16>
		 {
			 HC595Data1High();
  d8:	c0 9a       	sbi	0x18, 0	; 24
  da:	01 c0       	rjmp	.+2      	; 0xde <_ZN5HC5956Write1Eh+0x18>
		 }
		 else
		 {
			 HC595Data1Low();
  dc:	c0 98       	cbi	0x18, 0	; 24
		 }
		 HC595Pulse1();
  de:	c8 01       	movw	r24, r16
  e0:	0e 94 57 00 	call	0xae	; 0xae <_ZN5HC59511HC595Pulse1Ev>
		 data1=data1<<1;
  e4:	dd 0f       	add	r29, r29
  e6:	c1 50       	subi	r28, 0x01	; 1
 {
	 #if(NumOfReg >= 1 && NumOfReg <= 4)
	 {
	 //Send each 8 bits serially
	 //Order is MSB first
	 for(uint8_t i=0;i<8;i++)
  e8:	a9 f7       	brne	.-22     	; 0xd4 <_ZN5HC5956Write1Eh+0xe>
		 data1=data1<<1;
	 }
	 }
	 #endif
	 //This function writes the 1st shift register
 }
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <_ZN5HC5956Write2Eh>:

 void HC595::Write2(uint8_t data2)
 {
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
  fe:	d6 2f       	mov	r29, r22
 100:	c8 e0       	ldi	r28, 0x08	; 8
	 #if (NumOfReg >= 2 && NumOfReg <= 4)
	 {
	 for(uint8_t j=0;j<8;j++)
	 {
		 if(data2 & 0b10000000)
 102:	dd 23       	and	r29, r29
 104:	14 f4       	brge	.+4      	; 0x10a <_ZN5HC5956Write2Eh+0x16>
		 {
			 HC595Data2High();
 106:	c1 9a       	sbi	0x18, 1	; 24
 108:	01 c0       	rjmp	.+2      	; 0x10c <_ZN5HC5956Write2Eh+0x18>
		 }
		 else
		 {
			 HC595Data2Low();
 10a:	c1 98       	cbi	0x18, 1	; 24
		 }
		 HC595Pulse2();
 10c:	c8 01       	movw	r24, r16
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <_ZN5HC59511HC595Pulse2Ev>
		 data2=data2<<1;
 112:	dd 0f       	add	r29, r29
 114:	c1 50       	subi	r28, 0x01	; 1

 void HC595::Write2(uint8_t data2)
 {
	 #if (NumOfReg >= 2 && NumOfReg <= 4)
	 {
	 for(uint8_t j=0;j<8;j++)
 116:	a9 f7       	brne	.-22     	; 0x102 <_ZN5HC5956Write2Eh+0xe>
		 data2=data2<<1;
	 }
	 }
	 #endif
	 //This function writes the 2nd shift register
 }
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <_ZN5HC5956Write3Eh>:

 void HC595::Write3(uint8_t data3)
 {
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
 12c:	d6 2f       	mov	r29, r22
 12e:	c8 e0       	ldi	r28, 0x08	; 8
	 #if (NumOfReg >= 3 && NumOfReg <= 4)
	 {
	 for(uint8_t k=0;k<8;k++)
	 {
		 if(data3 & 0b10000000)
 130:	dd 23       	and	r29, r29
 132:	14 f4       	brge	.+4      	; 0x138 <_ZN5HC5956Write3Eh+0x16>
		 {
			 HC595Data3High();
 134:	c2 9a       	sbi	0x18, 2	; 24
 136:	01 c0       	rjmp	.+2      	; 0x13a <_ZN5HC5956Write3Eh+0x18>
		 }
		 else
		 {
			 HC595Data3Low();
 138:	c2 98       	cbi	0x18, 2	; 24
		 }
		 HC595Pulse3();
 13a:	c8 01       	movw	r24, r16
 13c:	0e 94 5d 00 	call	0xba	; 0xba <_ZN5HC59511HC595Pulse3Ev>
		 data3=data3<<1;
 140:	dd 0f       	add	r29, r29
 142:	c1 50       	subi	r28, 0x01	; 1

 void HC595::Write3(uint8_t data3)
 {
	 #if (NumOfReg >= 3 && NumOfReg <= 4)
	 {
	 for(uint8_t k=0;k<8;k++)
 144:	a9 f7       	brne	.-22     	; 0x130 <_ZN5HC5956Write3Eh+0xe>
		 data3=data3<<1;
	 }
	 }
	 #endif
	 //This function writes the 3rd shift register
 }
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <_ZN5HC5956Write4Eh>:

 void HC595::Write4(uint8_t data4)
 {
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	8c 01       	movw	r16, r24
 15a:	d6 2f       	mov	r29, r22
 15c:	c8 e0       	ldi	r28, 0x08	; 8
	 #if (NumOfReg == 4)
	 {
	 for(uint8_t l=0;l<8;l++)
	 {
		 if(data4 & 0b10000000)
 15e:	dd 23       	and	r29, r29
 160:	14 f4       	brge	.+4      	; 0x166 <_ZN5HC5956Write4Eh+0x16>
		 {
			 HC595Data4High();
 162:	c3 9a       	sbi	0x18, 3	; 24
 164:	01 c0       	rjmp	.+2      	; 0x168 <_ZN5HC5956Write4Eh+0x18>
		 }
		 else
		 {
			 HC595Data4Low();
 166:	c3 98       	cbi	0x18, 3	; 24
		 }
		 HC595Pulse4();
 168:	c8 01       	movw	r24, r16
 16a:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN5HC59511HC595Pulse4Ev>
		 data4=data4<<1;
 16e:	dd 0f       	add	r29, r29
 170:	c1 50       	subi	r28, 0x01	; 1

 void HC595::Write4(uint8_t data4)
 {
	 #if (NumOfReg == 4)
	 {
	 for(uint8_t l=0;l<8;l++)
 172:	a9 f7       	brne	.-22     	; 0x15e <_ZN5HC5956Write4Eh+0xe>
		 data4=data4<<1;
	 }
	 }
	 #endif
	 //This function writes the 4th shift register
 }
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <_ZN5HC59510HC595WRITEEiiii>:
	 }
	 #endif
 }
 
 void HC595::HC595WRITE(int Reg1, int Reg2, int Reg3, int Reg4)
 {
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
 18a:	f4 2e       	mov	r15, r20
 18c:	12 2f       	mov	r17, r18
		 Write3(Reg3);
	 }
	 #endif
	 #if (NumOfReg == 4)
	 {
		 Write1(Reg1);
 18e:	0e 94 63 00 	call	0xc6	; 0xc6 <_ZN5HC5956Write1Eh>
		 Write2(Reg2);
 192:	6f 2d       	mov	r22, r15
 194:	ce 01       	movw	r24, r28
 196:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN5HC5956Write2Eh>
		 Write3(Reg3);
 19a:	61 2f       	mov	r22, r17
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 91 00 	call	0x122	; 0x122 <_ZN5HC5956Write3Eh>
		 Write4(Reg4);
 1a2:	60 2f       	mov	r22, r16
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN5HC5956Write4Eh>
	 }
	 #endif
	 
	 HC595Latch();
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 4e 00 	call	0x9c	; 0x9c <_ZN5HC59510HC595LatchEv>
 }
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	08 95       	ret

000001bc <main>:

uint8_t led_pattern[10] = {63,6,91,79,102,109,125,7,127,111};
	
int main(void)
{
	shift.init();
 1bc:	8a e6       	ldi	r24, 0x6A	; 106
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 49 00 	call	0x92	; 0x92 <_ZN5HC5954initEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	83 ec       	ldi	r24, 0xC3	; 195
 1c8:	99 e0       	ldi	r25, 0x09	; 9
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0xe>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x18>
 1d4:	00 00       	nop
	_delay_ms(200);
	
    /* Replace with your application code */
    while (1) 
    {
		shift.HC595WRITE(led_pattern[5],led_pattern[3],led_pattern[1],led_pattern[6]);
 1d6:	c0 e6       	ldi	r28, 0x60	; 96
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	0e 81       	ldd	r16, Y+6	; 0x06
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	29 81       	ldd	r18, Y+1	; 0x01
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	4b 81       	ldd	r20, Y+3	; 0x03
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	6d 81       	ldd	r22, Y+5	; 0x05
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8a e6       	ldi	r24, 0x6A	; 106
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN5HC59510HC595WRITEEiiii>

HC595 shift;

uint8_t led_pattern[10] = {63,6,91,79,102,109,125,7,127,111};
	
int main(void)
 1f2:	f3 cf       	rjmp	.-26     	; 0x1da <main+0x1e>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
