
SetRtcTime_button2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00000654  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800114  00800114  0000079c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023e7  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098d  00000000  00000000  00002cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c79  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  000042d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a2  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001346  00000000  00000000  00004d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	12 03       	mulsu	r17, r18

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	11 e0       	ldi	r17, 0x01	; 1
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f6 e0       	ldi	r31, 0x06	; 6
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a4 31       	cpi	r26, 0x14	; 20
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a4 e1       	ldi	r26, 0x14	; 20
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	aa 32       	cpi	r26, 0x2A	; 42
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 19 03 	call	0x632	; 0x632 <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <main>
  a2:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_ZN3lcd11Lcd_RawSendEcc>:
   		
	  string [0] = hexCode [ (( Number >> 4) &  0x0F ) ];
	  string [1] = hexCode [ ( Number & 0x0F) ];
	  writeText(row, column, string);
	  
}
  aa:	44 23       	and	r20, r20
  ac:	11 f0       	breq	.+4      	; 0xb2 <_ZN3lcd11Lcd_RawSendEcc+0x8>
  ae:	df 9a       	sbi	0x1b, 7	; 27
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <_ZN3lcd11Lcd_RawSendEcc+0xa>
  b2:	df 98       	cbi	0x1b, 7	; 27
  b4:	86 2f       	mov	r24, r22
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	80 ff       	sbrs	r24, 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <_ZN3lcd11Lcd_RawSendEcc+0x18>
  be:	d8 9a       	sbi	0x1b, 0	; 27
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <_ZN3lcd11Lcd_RawSendEcc+0x1a>
  c2:	d8 98       	cbi	0x1b, 0	; 27
  c4:	81 ff       	sbrs	r24, 1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_ZN3lcd11Lcd_RawSendEcc+0x22>
  c8:	d9 9a       	sbi	0x1b, 1	; 27
  ca:	01 c0       	rjmp	.+2      	; 0xce <_ZN3lcd11Lcd_RawSendEcc+0x24>
  cc:	d9 98       	cbi	0x1b, 1	; 27
  ce:	82 ff       	sbrs	r24, 2
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <_ZN3lcd11Lcd_RawSendEcc+0x2c>
  d2:	da 9a       	sbi	0x1b, 2	; 27
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <_ZN3lcd11Lcd_RawSendEcc+0x2e>
  d6:	da 98       	cbi	0x1b, 2	; 27
  d8:	88 70       	andi	r24, 0x08	; 8
  da:	11 f0       	breq	.+4      	; 0xe0 <_ZN3lcd11Lcd_RawSendEcc+0x36>
  dc:	db 9a       	sbi	0x1b, 3	; 27
  de:	01 c0       	rjmp	.+2      	; 0xe2 <_ZN3lcd11Lcd_RawSendEcc+0x38>
  e0:	db 98       	cbi	0x1b, 3	; 27
  e2:	dd 98       	cbi	0x1b, 5	; 27
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <_ZN3lcd11Lcd_RawSendEcc+0x3c>
  ea:	00 00       	nop
  ec:	dd 9a       	sbi	0x1b, 5	; 27
  ee:	95 e0       	ldi	r25, 0x05	; 5
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <_ZN3lcd11Lcd_RawSendEcc+0x46>
  f4:	00 00       	nop
  f6:	dd 98       	cbi	0x1b, 5	; 27
  f8:	8f e8       	ldi	r24, 0x8F	; 143
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <_ZN3lcd11Lcd_RawSendEcc+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <_ZN3lcd11Lcd_RawSendEcc+0x58>
 102:	00 00       	nop
 104:	44 23       	and	r20, r20
 106:	11 f0       	breq	.+4      	; 0x10c <_ZN3lcd11Lcd_RawSendEcc+0x62>
 108:	df 9a       	sbi	0x1b, 7	; 27
 10a:	01 c0       	rjmp	.+2      	; 0x10e <_ZN3lcd11Lcd_RawSendEcc+0x64>
 10c:	df 98       	cbi	0x1b, 7	; 27
 10e:	60 ff       	sbrs	r22, 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <_ZN3lcd11Lcd_RawSendEcc+0x6c>
 112:	d8 9a       	sbi	0x1b, 0	; 27
 114:	01 c0       	rjmp	.+2      	; 0x118 <_ZN3lcd11Lcd_RawSendEcc+0x6e>
 116:	d8 98       	cbi	0x1b, 0	; 27
 118:	61 ff       	sbrs	r22, 1
 11a:	02 c0       	rjmp	.+4      	; 0x120 <_ZN3lcd11Lcd_RawSendEcc+0x76>
 11c:	d9 9a       	sbi	0x1b, 1	; 27
 11e:	01 c0       	rjmp	.+2      	; 0x122 <_ZN3lcd11Lcd_RawSendEcc+0x78>
 120:	d9 98       	cbi	0x1b, 1	; 27
 122:	62 ff       	sbrs	r22, 2
 124:	02 c0       	rjmp	.+4      	; 0x12a <_ZN3lcd11Lcd_RawSendEcc+0x80>
 126:	da 9a       	sbi	0x1b, 2	; 27
 128:	01 c0       	rjmp	.+2      	; 0x12c <_ZN3lcd11Lcd_RawSendEcc+0x82>
 12a:	da 98       	cbi	0x1b, 2	; 27
 12c:	63 ff       	sbrs	r22, 3
 12e:	02 c0       	rjmp	.+4      	; 0x134 <_ZN3lcd11Lcd_RawSendEcc+0x8a>
 130:	db 9a       	sbi	0x1b, 3	; 27
 132:	01 c0       	rjmp	.+2      	; 0x136 <_ZN3lcd11Lcd_RawSendEcc+0x8c>
 134:	db 98       	cbi	0x1b, 3	; 27
 136:	dd 98       	cbi	0x1b, 5	; 27
 138:	95 e0       	ldi	r25, 0x05	; 5
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <_ZN3lcd11Lcd_RawSendEcc+0x90>
 13e:	00 00       	nop
 140:	dd 9a       	sbi	0x1b, 5	; 27
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <_ZN3lcd11Lcd_RawSendEcc+0x9a>
 148:	00 00       	nop
 14a:	dd 98       	cbi	0x1b, 5	; 27
 14c:	8f e8       	ldi	r24, 0x8F	; 143
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <_ZN3lcd11Lcd_RawSendEcc+0xa6>
 154:	00 c0       	rjmp	.+0      	; 0x156 <_ZN3lcd11Lcd_RawSendEcc+0xac>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <_ZN3lcd4initEv>:
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
 160:	88 81       	ld	r24, Y
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	98 0f       	add	r25, r24
 166:	92 30       	cpi	r25, 0x02	; 2
 168:	38 f0       	brcs	.+14     	; 0x178 <_ZN3lcd4initEv+0x1e>
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	29 f0       	breq	.+10     	; 0x178 <_ZN3lcd4initEv+0x1e>
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	88 83       	st	Y, r24
 172:	80 e1       	ldi	r24, 0x10	; 16
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	08 c0       	rjmp	.+16     	; 0x188 <_ZN3lcd4initEv+0x2e>
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	80 31       	cpi	r24, 0x10	; 16
 17e:	21 f0       	breq	.+8      	; 0x188 <_ZN3lcd4initEv+0x2e>
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	88 83       	st	Y, r24
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	d5 9a       	sbi	0x1a, 5	; 26
 18a:	d7 9a       	sbi	0x1a, 7	; 26
 18c:	d0 9a       	sbi	0x1a, 0	; 26
 18e:	d1 9a       	sbi	0x1a, 1	; 26
 190:	d2 9a       	sbi	0x1a, 2	; 26
 192:	d3 9a       	sbi	0x1a, 3	; 26
 194:	8f e7       	ldi	r24, 0x7F	; 127
 196:	9b eb       	ldi	r25, 0xBB	; 187
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_ZN3lcd4initEv+0x3e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_ZN3lcd4initEv+0x44>
 19e:	00 00       	nop
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	63 e3       	ldi	r22, 0x33	; 51
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	9f e1       	ldi	r25, 0x1F	; 31
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <_ZN3lcd4initEv+0x54>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN3lcd4initEv+0x5a>
 1b4:	00 00       	nop
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	63 e3       	ldi	r22, 0x33	; 51
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9f e1       	ldi	r25, 0x1F	; 31
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_ZN3lcd4initEv+0x6a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_ZN3lcd4initEv+0x70>
 1ca:	00 00       	nop
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	63 e3       	ldi	r22, 0x33	; 51
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9f e1       	ldi	r25, 0x1F	; 31
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <_ZN3lcd4initEv+0x80>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_ZN3lcd4initEv+0x86>
 1e0:	00 00       	nop
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	62 e3       	ldi	r22, 0x32	; 50
 1e6:	ce 01       	movw	r24, r28
 1e8:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	9f e1       	ldi	r25, 0x1F	; 31
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <_ZN3lcd4initEv+0x96>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_ZN3lcd4initEv+0x9c>
 1f6:	00 00       	nop
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	68 e2       	ldi	r22, 0x28	; 40
 1fc:	ce 01       	movw	r24, r28
 1fe:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	9f e1       	ldi	r25, 0x1F	; 31
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <_ZN3lcd4initEv+0xac>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <_ZN3lcd4initEv+0xb2>
 20c:	00 00       	nop
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	66 e0       	ldi	r22, 0x06	; 6
 212:	ce 01       	movw	r24, r28
 214:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 218:	8f e3       	ldi	r24, 0x3F	; 63
 21a:	9f e1       	ldi	r25, 0x1F	; 31
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <_ZN3lcd4initEv+0xc2>
 220:	00 c0       	rjmp	.+0      	; 0x222 <_ZN3lcd4initEv+0xc8>
 222:	00 00       	nop
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	6c e0       	ldi	r22, 0x0C	; 12
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9f e1       	ldi	r25, 0x1F	; 31
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <_ZN3lcd4initEv+0xd8>
 236:	00 c0       	rjmp	.+0      	; 0x238 <_ZN3lcd4initEv+0xde>
 238:	00 00       	nop
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	ce 01       	movw	r24, r28
 240:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9f e1       	ldi	r25, 0x1F	; 31
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <_ZN3lcd4initEv+0xee>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <_ZN3lcd4initEv+0xf4>
 24e:	00 00       	nop
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	ce 01       	movw	r24, r28
 256:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	9f e1       	ldi	r25, 0x1F	; 31
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <_ZN3lcd4initEv+0x104>
 262:	00 c0       	rjmp	.+0      	; 0x264 <_ZN3lcd4initEv+0x10a>
 264:	00 00       	nop
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <_ZN3lcd5clearEv>:
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9f e1       	ldi	r25, 0x1F	; 31
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <_ZN3lcd5clearEv+0x12>
 282:	00 c0       	rjmp	.+0      	; 0x284 <_ZN3lcd5clearEv+0x18>
 284:	00 00       	nop
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	62 e0       	ldi	r22, 0x02	; 2
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 290:	8f e3       	ldi	r24, 0x3F	; 63
 292:	9f e1       	ldi	r25, 0x1F	; 31
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <_ZN3lcd5clearEv+0x28>
 298:	00 c0       	rjmp	.+0      	; 0x29a <_ZN3lcd5clearEv+0x2e>
 29a:	00 00       	nop
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <_ZN3lcd10Lcd_CursorEcc>:
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 81       	ld	r18, Z
 2a6:	21 30       	cpi	r18, 0x01	; 1
 2a8:	a1 f0       	breq	.+40     	; 0x2d2 <_ZN3lcd10Lcd_CursorEcc+0x30>
 2aa:	22 30       	cpi	r18, 0x02	; 2
 2ac:	21 f4       	brne	.+8      	; 0x2b6 <_ZN3lcd10Lcd_CursorEcc+0x14>
 2ae:	66 23       	and	r22, r22
 2b0:	21 f1       	breq	.+72     	; 0x2fa <_ZN3lcd10Lcd_CursorEcc+0x58>
 2b2:	60 ec       	ldi	r22, 0xC0	; 192
 2b4:	17 c0       	rjmp	.+46     	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>
 2b6:	24 30       	cpi	r18, 0x04	; 4
 2b8:	a9 f4       	brne	.+42     	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>
 2ba:	fc 01       	movw	r30, r24
 2bc:	21 81       	ldd	r18, Z+1	; 0x01
 2be:	20 31       	cpi	r18, 0x10	; 16
 2c0:	51 f0       	breq	.+20     	; 0x2d6 <_ZN3lcd10Lcd_CursorEcc+0x34>
 2c2:	66 23       	and	r22, r22
 2c4:	51 f0       	breq	.+20     	; 0x2da <_ZN3lcd10Lcd_CursorEcc+0x38>
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	51 f0       	breq	.+20     	; 0x2de <_ZN3lcd10Lcd_CursorEcc+0x3c>
 2ca:	62 30       	cpi	r22, 0x02	; 2
 2cc:	51 f0       	breq	.+20     	; 0x2e2 <_ZN3lcd10Lcd_CursorEcc+0x40>
 2ce:	64 ed       	ldi	r22, 0xD4	; 212
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>
 2d2:	60 e8       	ldi	r22, 0x80	; 128
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>
 2d6:	64 ed       	ldi	r22, 0xD4	; 212
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>
 2da:	60 e8       	ldi	r22, 0x80	; 128
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>
 2de:	60 ec       	ldi	r22, 0xC0	; 192
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>
 2e2:	64 e9       	ldi	r22, 0x94	; 148
 2e4:	64 0f       	add	r22, r20
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 2ec:	8f e3       	ldi	r24, 0x3F	; 63
 2ee:	9f e1       	ldi	r25, 0x1F	; 31
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <_ZN3lcd10Lcd_CursorEcc+0x4e>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <_ZN3lcd10Lcd_CursorEcc+0x54>
 2f6:	00 00       	nop
 2f8:	08 95       	ret
 2fa:	60 e8       	ldi	r22, 0x80	; 128
 2fc:	f3 cf       	rjmp	.-26     	; 0x2e4 <_ZN3lcd10Lcd_CursorEcc+0x42>

000002fe <_ZN3lcd15Lcd_PrintStringEPKcc>:
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	fb 01       	movw	r30, r22
 30c:	44 23       	and	r20, r20
 30e:	01 f1       	breq	.+64     	; 0x350 <_ZN3lcd15Lcd_PrintStringEPKcc+0x52>
 310:	60 81       	ld	r22, Z
 312:	66 23       	and	r22, r22
 314:	e9 f0       	breq	.+58     	; 0x350 <_ZN3lcd15Lcd_PrintStringEPKcc+0x52>
 316:	dc 01       	movw	r26, r24
 318:	11 96       	adiw	r26, 0x01	; 1
 31a:	2c 91       	ld	r18, X
 31c:	22 23       	and	r18, r18
 31e:	c1 f0       	breq	.+48     	; 0x350 <_ZN3lcd15Lcd_PrintStringEPKcc+0x52>
 320:	d4 2f       	mov	r29, r20
 322:	8f 01       	movw	r16, r30
 324:	7c 01       	movw	r14, r24
 326:	0f 5f       	subi	r16, 0xFF	; 255
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	0a c0       	rjmp	.+20     	; 0x342 <_ZN3lcd15Lcd_PrintStringEPKcc+0x44>
 32e:	f8 01       	movw	r30, r16
 330:	61 91       	ld	r22, Z+
 332:	8f 01       	movw	r16, r30
 334:	66 23       	and	r22, r22
 336:	61 f0       	breq	.+24     	; 0x350 <_ZN3lcd15Lcd_PrintStringEPKcc+0x52>
 338:	d7 01       	movw	r26, r14
 33a:	11 96       	adiw	r26, 0x01	; 1
 33c:	8c 91       	ld	r24, X
 33e:	8c 17       	cp	r24, r28
 340:	39 f0       	breq	.+14     	; 0x350 <_ZN3lcd15Lcd_PrintStringEPKcc+0x52>
 342:	40 e1       	ldi	r20, 0x10	; 16
 344:	c7 01       	movw	r24, r14
 346:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN3lcd11Lcd_RawSendEcc>
 34a:	cf 5f       	subi	r28, 0xFF	; 255
 34c:	cd 13       	cpse	r28, r29
 34e:	ef cf       	rjmp	.-34     	; 0x32e <_ZN3lcd15Lcd_PrintStringEPKcc+0x30>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	08 95       	ret

0000035e <_ZN3lcd9writeTextEccPKc>:
 35e:	ef 92       	push	r14
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	8c 01       	movw	r16, r24
 36c:	79 01       	movw	r14, r18
 36e:	fc 01       	movw	r30, r24
 370:	c1 81       	ldd	r28, Z+1	; 0x01
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	c4 1b       	sub	r28, r20
 376:	d1 09       	sbc	r29, r1
 378:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_ZN3lcd10Lcd_CursorEcc>
 37c:	4c 2f       	mov	r20, r28
 37e:	b7 01       	movw	r22, r14
 380:	c8 01       	movw	r24, r16
 382:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN3lcd15Lcd_PrintStringEPKcc>
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	08 95       	ret

00000394 <_Z13readKeypad4X4v>:


uint8_t  readKeypad4X4 (void){
uint8_t keypadData = 255;
	
	keypadPort = 0x0F;
 394:	8f e0       	ldi	r24, 0x0F	; 15
 396:	85 bb       	out	0x15, r24	; 21
	keypadPortDirection  = 0xF0;
 398:	80 ef       	ldi	r24, 0xF0	; 240
 39a:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	8a e1       	ldi	r24, 0x1A	; 26
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <_Z13readKeypad4X4v+0xa>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <_Z13readKeypad4X4v+0x10>
	Delay_us(5);
	

	if (keypadRow0==0){
 3a4:	98 9b       	sbis	0x13, 0	; 19
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_Z13readKeypad4X4v+0x24>
		keypadData = 0;
		goto _keypadColumn;
	}
	else{
		if(keypadRow1==0){
 3a8:	99 9b       	sbis	0x13, 1	; 19
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <_Z13readKeypad4X4v+0x28>
			keypadData = 4;
			goto _keypadColumn;
		}
		else{
			if(keypadRow2==0){
 3ac:	9a 9b       	sbis	0x13, 2	; 19
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <_Z13readKeypad4X4v+0x2c>
				keypadData = 8;
				goto _keypadColumn;
			}
			else{
				if (keypadRow3==0){
 3b0:	9b 99       	sbic	0x13, 3	; 19
 3b2:	1d c0       	rjmp	.+58     	; 0x3ee <_Z13readKeypad4X4v+0x5a>
					keypadData = 12;
 3b4:	8c e0       	ldi	r24, 0x0C	; 12
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <_Z13readKeypad4X4v+0x2e>
	keypadPortDirection  = 0xF0;
	Delay_us(5);
	

	if (keypadRow0==0){
		keypadData = 0;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <_Z13readKeypad4X4v+0x2e>
		goto _keypadColumn;
	}
	else{
		if(keypadRow1==0){
			keypadData = 4;
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <_Z13readKeypad4X4v+0x2e>
			goto _keypadColumn;
		}
		else{
			if(keypadRow2==0){
				keypadData = 8;
 3c0:	88 e0       	ldi	r24, 0x08	; 8
			}
		}
	}

	_keypadColumn:
	keypadPort = 0xF0;
 3c2:	90 ef       	ldi	r25, 0xF0	; 240
 3c4:	95 bb       	out	0x15, r25	; 21
	keypadPortDirection  = 0x0F;
 3c6:	9f e0       	ldi	r25, 0x0F	; 15
 3c8:	94 bb       	out	0x14, r25	; 20
 3ca:	9a e1       	ldi	r25, 0x1A	; 26
 3cc:	9a 95       	dec	r25
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <_Z13readKeypad4X4v+0x38>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <_Z13readKeypad4X4v+0x3e>
	Delay_us(5);

	if (keypadCol0==0){
 3d2:	9c 9b       	sbis	0x13, 4	; 19
 3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <_Z13readKeypad4X4v+0x60>
		keypadData = keypadData + 0;
		goto _keypadReturnKey;
	}
	else{
		if(keypadCol1==0){
 3d6:	9d 99       	sbic	0x13, 5	; 19
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <_Z13readKeypad4X4v+0x4a>
			keypadData = keypadData + 1;
 3da:	8f 5f       	subi	r24, 0xFF	; 255
			goto _keypadReturnKey;
 3dc:	08 95       	ret
		}
		else{
			if( keypadCol2==0  ){
 3de:	9e 99       	sbic	0x13, 6	; 19
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_Z13readKeypad4X4v+0x52>
				keypadData = keypadData + 2;
 3e2:	8e 5f       	subi	r24, 0xFE	; 254
				goto _keypadReturnKey;
 3e4:	08 95       	ret
			}
			else{
				if (keypadCol3==0){
 3e6:	9f 99       	sbic	0x13, 7	; 19
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_Z13readKeypad4X4v+0x5e>
					keypadData = keypadData + 3;
 3ea:	8d 5f       	subi	r24, 0xFD	; 253
					goto _keypadReturnKey;
 3ec:	08 95       	ret
					keypadData = 12;
					goto _keypadColumn;
				}
				else{
					//goto _keypadReturnKey;
					return 255;
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	08 95       	ret
					keypadData = keypadData + 3;
					goto _keypadReturnKey;
				}
				else{
					//keypadData = 255;
					return 255;
 3f2:	8f ef       	ldi	r24, 0xFF	; 255

	_keypadReturnKey:

	return keypadData;

}
 3f4:	08 95       	ret

000003f6 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	80 e7       	ldi	r24, 0x70	; 112
 3fa:	92 e0       	ldi	r25, 0x02	; 2
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x6>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
char test[16] = "";

int main(void)
{
	delay_ms(50);
	display.init();
 408:	88 e2       	ldi	r24, 0x28	; 40
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3lcd4initEv>
	display.clear();
 410:	88 e2       	ldi	r24, 0x28	; 40
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN3lcd5clearEv>
	
	display.writeText(0, 0, "INITIALIZING...");
 418:	22 e9       	ldi	r18, 0x92	; 146
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	40 e0       	ldi	r20, 0x00	; 0
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	88 e2       	ldi	r24, 0x28	; 40
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
	display.writeText(1, 0, "Password Test");
 428:	22 ea       	ldi	r18, 0xA2	; 162
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	88 e2       	ldi	r24, 0x28	; 40
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	87 ea       	ldi	r24, 0xA7	; 167
 43c:	91 e6       	ldi	r25, 0x61	; 97
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 448:	00 00       	nop
	delay_ms(2000);
	display.clear();
 44a:	88 e2       	ldi	r24, 0x28	; 40
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN3lcd5clearEv>
	
    /* Replace with your application code */
    while (1) 
    { 
		display.writeText(0,0,"ENTER PASSWORD:");
 452:	20 eb       	ldi	r18, 0xB0	; 176
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	88 e2       	ldi	r24, 0x28	; 40
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
		key = readKeypad4X4(); 
 462:	0e 94 ca 01 	call	0x394	; 0x394 <_Z13readKeypad4X4v>
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <key+0x1>
 46c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <key>
		 
		if(key != 255)    //If a key on the keypad is pressed
 470:	8f 3f       	cpi	r24, 0xFF	; 255
 472:	91 05       	cpc	r25, r1
 474:	09 f4       	brne	.+2      	; 0x478 <__stack+0x19>
 476:	cd c0       	rjmp	.+410    	; 0x612 <__stack+0x1b3>
		{
			display.writeText(1,i+6,"*");
 478:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <i>
 47c:	4a 5f       	subi	r20, 0xFA	; 250
 47e:	20 ec       	ldi	r18, 0xC0	; 192
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	88 e2       	ldi	r24, 0x28	; 40
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
			press = keyPadCode[key];
 48c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <key>
 490:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <key+0x1>
 494:	e0 59       	subi	r30, 0x90	; 144
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	90 81       	ld	r25, Z
 49a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <press>
		    test[i] = press;
 49e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 4a2:	e8 2f       	mov	r30, r24
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ec 5e       	subi	r30, 0xEC	; 236
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	90 83       	st	Z, r25
		    i++;
 4ac:	8f 5f       	subi	r24, 0xFF	; 255
 4ae:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <i>
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	89 e6       	ldi	r24, 0x69	; 105
 4b6:	98 e1       	ldi	r25, 0x18	; 24
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	90 40       	sbci	r25, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <__stack+0x59>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__stack+0x63>
 4c2:	00 00       	nop
			_delay_ms(500);
		}
		while(strcmp(test, user)==0)   //While the user inputs the correct password
 4c4:	60 e6       	ldi	r22, 0x60	; 96
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	84 e1       	ldi	r24, 0x14	; 20
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 1f 03 	call	0x63e	; 0x63e <strcmp>
 4d0:	89 2b       	or	r24, r25
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__stack+0x77>
 4d4:	98 c0       	rjmp	.+304    	; 0x606 <__stack+0x1a7>
		{
			display.writeText(0,0,"VERIFYING...    ");
 4d6:	22 ec       	ldi	r18, 0xC2	; 194
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	88 e2       	ldi	r24, 0x28	; 40
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
			display.writeText(1,6,"       ");
 4e6:	23 ed       	ldi	r18, 0xD3	; 211
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	46 e0       	ldi	r20, 0x06	; 6
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	88 e2       	ldi	r24, 0x28	; 40
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
			for(uint8_t a=0;a<12;a++)
 4f6:	c0 e0       	ldi	r28, 0x00	; 0
			{
				display.writeText(1,a,".");
 4f8:	20 ea       	ldi	r18, 0xA0	; 160
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	4c 2f       	mov	r20, r28
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	88 e2       	ldi	r24, 0x28	; 40
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	83 ec       	ldi	r24, 0xC3	; 195
 50c:	99 e0       	ldi	r25, 0x09	; 9
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <__stack+0xaf>
 516:	00 c0       	rjmp	.+0      	; 0x518 <__stack+0xb9>
 518:	00 00       	nop
		}
		while(strcmp(test, user)==0)   //While the user inputs the correct password
		{
			display.writeText(0,0,"VERIFYING...    ");
			display.writeText(1,6,"       ");
			for(uint8_t a=0;a<12;a++)
 51a:	cf 5f       	subi	r28, 0xFF	; 255
 51c:	cc 30       	cpi	r28, 0x0C	; 12
 51e:	61 f7       	brne	.-40     	; 0x4f8 <__stack+0x99>
			{
				display.writeText(1,a,".");
				_delay_ms(200);
			}
			display.clear();
 520:	88 e2       	ldi	r24, 0x28	; 40
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN3lcd5clearEv>
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	83 ed       	ldi	r24, 0xD3	; 211
 52c:	90 e3       	ldi	r25, 0x30	; 48
 52e:	21 50       	subi	r18, 0x01	; 1
 530:	80 40       	sbci	r24, 0x00	; 0
 532:	90 40       	sbci	r25, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <__stack+0xcf>
 536:	00 c0       	rjmp	.+0      	; 0x538 <__stack+0xd9>
 538:	00 00       	nop
			_delay_ms(1000);
			while(1)
			{
				display.writeText(0,4,"VERIFIED");
 53a:	2b ed       	ldi	r18, 0xDB	; 219
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	44 e0       	ldi	r20, 0x04	; 4
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	88 e2       	ldi	r24, 0x28	; 40
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
				display.writeText(1,1,"ACCESS GRANTED!");
 54a:	24 ee       	ldi	r18, 0xE4	; 228
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	88 e2       	ldi	r24, 0x28	; 40
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
 55a:	2f ef       	ldi	r18, 0xFF	; 255
 55c:	80 e7       	ldi	r24, 0x70	; 112
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	21 50       	subi	r18, 0x01	; 1
 562:	80 40       	sbci	r24, 0x00	; 0
 564:	90 40       	sbci	r25, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <__stack+0x101>
 568:	00 c0       	rjmp	.+0      	; 0x56a <__stack+0x10b>
 56a:	00 00       	nop
 56c:	e6 cf       	rjmp	.-52     	; 0x53a <__stack+0xdb>
				_delay_ms(50);
			}
		    } 
		while(strcmp(test, user)!=0 && i == 4)   //If the user inputs an incorrect password
		{
			display.writeText(0,0,"VERIFYING...    ");
 56e:	22 ec       	ldi	r18, 0xC2	; 194
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	88 e2       	ldi	r24, 0x28	; 40
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
			display.writeText(1,6,"       ");
 57e:	23 ed       	ldi	r18, 0xD3	; 211
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	46 e0       	ldi	r20, 0x06	; 6
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	88 e2       	ldi	r24, 0x28	; 40
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
			for(uint8_t a=0;a<12;a++)
 58e:	c0 e0       	ldi	r28, 0x00	; 0
			{
				display.writeText(1,a,".");
 590:	20 ea       	ldi	r18, 0xA0	; 160
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	4c 2f       	mov	r20, r28
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	88 e2       	ldi	r24, 0x28	; 40
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
 5a0:	2f ef       	ldi	r18, 0xFF	; 255
 5a2:	83 ec       	ldi	r24, 0xC3	; 195
 5a4:	99 e0       	ldi	r25, 0x09	; 9
 5a6:	21 50       	subi	r18, 0x01	; 1
 5a8:	80 40       	sbci	r24, 0x00	; 0
 5aa:	90 40       	sbci	r25, 0x00	; 0
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <__stack+0x147>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <__stack+0x151>
 5b0:	00 00       	nop
		    } 
		while(strcmp(test, user)!=0 && i == 4)   //If the user inputs an incorrect password
		{
			display.writeText(0,0,"VERIFYING...    ");
			display.writeText(1,6,"       ");
			for(uint8_t a=0;a<12;a++)
 5b2:	cf 5f       	subi	r28, 0xFF	; 255
 5b4:	cc 30       	cpi	r28, 0x0C	; 12
 5b6:	61 f7       	brne	.-40     	; 0x590 <__stack+0x131>
			{
				display.writeText(1,a,".");
				_delay_ms(200);
			}
			display.clear();
 5b8:	88 e2       	ldi	r24, 0x28	; 40
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN3lcd5clearEv>
 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	83 ed       	ldi	r24, 0xD3	; 211
 5c4:	90 e3       	ldi	r25, 0x30	; 48
 5c6:	21 50       	subi	r18, 0x01	; 1
 5c8:	80 40       	sbci	r24, 0x00	; 0
 5ca:	90 40       	sbci	r25, 0x00	; 0
 5cc:	e1 f7       	brne	.-8      	; 0x5c6 <__stack+0x167>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <__stack+0x171>
 5d0:	00 00       	nop
			_delay_ms(1000);
			while(1)
			{
				display.writeText(0,0," ACCESS DENIED!");
 5d2:	24 ef       	ldi	r18, 0xF4	; 244
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	88 e2       	ldi	r24, 0x28	; 40
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
				display.writeText(1,0,"please reset...");
 5e2:	24 e0       	ldi	r18, 0x04	; 4
 5e4:	31 e0       	ldi	r19, 0x01	; 1
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	88 e2       	ldi	r24, 0x28	; 40
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3lcd9writeTextEccPKc>
 5f2:	2f ef       	ldi	r18, 0xFF	; 255
 5f4:	80 e7       	ldi	r24, 0x70	; 112
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	21 50       	subi	r18, 0x01	; 1
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <__stack+0x199>
 600:	00 c0       	rjmp	.+0      	; 0x602 <__stack+0x1a3>
 602:	00 00       	nop
 604:	e6 cf       	rjmp	.-52     	; 0x5d2 <__stack+0x173>
				display.writeText(0,4,"VERIFIED");
				display.writeText(1,1,"ACCESS GRANTED!");
				_delay_ms(50);
			}
		    } 
		while(strcmp(test, user)!=0 && i == 4)   //If the user inputs an incorrect password
 606:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 60a:	84 30       	cpi	r24, 0x04	; 4
 60c:	09 f0       	breq	.+2      	; 0x610 <__stack+0x1b1>
 60e:	21 cf       	rjmp	.-446    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 610:	ae cf       	rjmp	.-164    	; 0x56e <__stack+0x10f>
			press = keyPadCode[key];
		    test[i] = press;
		    i++;
			_delay_ms(500);
		}
		while(strcmp(test, user)==0)   //While the user inputs the correct password
 612:	60 e6       	ldi	r22, 0x60	; 96
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	84 e1       	ldi	r24, 0x14	; 20
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 1f 03 	call	0x63e	; 0x63e <strcmp>
 61e:	89 2b       	or	r24, r25
 620:	91 f7       	brne	.-28     	; 0x606 <__stack+0x1a7>
 622:	59 cf       	rjmp	.-334    	; 0x4d6 <__stack+0x77>

00000624 <_GLOBAL__sub_I__Z2Hij>:
				uint8_t LCD_COLCNT;
 };


lcd::lcd(char columnNum, char rowNum )
:LCD_ROWCNT (rowNum), LCD_COLCNT(columnNum)
 624:	e8 e2       	ldi	r30, 0x28	; 40
 626:	f1 e0       	ldi	r31, 0x01	; 1
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	80 83       	st	Z, r24
 62c:	80 e1       	ldi	r24, 0x10	; 16
 62e:	81 83       	std	Z+1, r24	; 0x01
 630:	08 95       	ret

00000632 <__tablejump2__>:
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	05 90       	lpm	r0, Z+
 638:	f4 91       	lpm	r31, Z
 63a:	e0 2d       	mov	r30, r0
 63c:	09 94       	ijmp

0000063e <strcmp>:
 63e:	fb 01       	movw	r30, r22
 640:	dc 01       	movw	r26, r24
 642:	8d 91       	ld	r24, X+
 644:	01 90       	ld	r0, Z+
 646:	80 19       	sub	r24, r0
 648:	01 10       	cpse	r0, r1
 64a:	d9 f3       	breq	.-10     	; 0x642 <strcmp+0x4>
 64c:	99 0b       	sbc	r25, r25
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
